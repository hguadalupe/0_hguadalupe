import pandas as pd
import numpy as np
from matplotlib import pyplot as plt

df = pd.read_csv (r'csvfile.csv')
col_names =list(df)
df

#Basic exploration:
titanic[["Age", "Fare"]].describe()   #basic stats by column.
df.plot.hist(column=["column"])  # HISTOGRAM. Plots a graph with the distributions of values of a column (only for numerical and datetime type of data).
df['column'].value_counts().plot(kind='bar') #HISTOGRAM. Plots a graph with the distributions of values of a column (for categorical type of data).

#Reshaping Data (google melt and pivotable functions).
pd.melt(df)  #Gather columns into rows.
df.pivot(columns='var', values='val')  #Spread rows into columns.
pd.concat([df1,df2])  #Append rows of DataFrames
pd.concat([df1,df2], axis=1)  #Append columns of DataFrames
df2=(df.replace(to_replace =["m","f","014","65","u"],value =["Male","Female","0-14","65+","unknown"])
            .dropna())           # Creaning and tyling the dataset                         

#Subset Observations (rows)
df[df.Length > 7] #Extract rows that meet logical criteria.
df.drop_duplicates()  #Remove duplicate rows (only considers columns).
df.iloc[10:20]  #Select rows by position.
df.nlargest(n, 'value')  #Select and order top n entries.
df.nsmallest(n, 'value')  #Select and order bottom n entries.

#Subset Observations (columns)
df[['width','length','species']]  #Select multiple columns with specific names.
df['width'] or df.width  #Select single column with specific name.
df.filter(regex='regex')   #Select columns whose name matches regular expression regex.

df.loc[:,'x2':'x4']   #Select all columns between x2 and x4 (inclusive).
df.iloc[:,[1,2,5]]   #Select columns in positions 1, 2 and 5 (first column is 0).
df.loc[df['a'] > 10, ['a','c']]   #Select rows meeting logical condition, and only the specific columns .

#One Hot Encoding (OHE), boolean-mask your categorical columns, and boolean-label your float-columns with threshold depending in your knowledge for better processing.
#Mask each category in one column:
list(np.unique(df["categorical_col"]))
df_ohecat1=[1 if n =="cat1" else 0 for n in df["categorical_col"]]
#Floats:
def divide(x):
    return np.divide(x['weeks_delay'],x['weeks_duration'])
delays = pd.DataFrame()
delays = df.apply(divide,axis=1) #axis 1 applies the function to the columns.
df_ohe["DELAYED"] = [1 if n > 0.2  else 0 for n in delays]  #creates a new boolean column checking with de "divide" function if it is "delayed" or not.


